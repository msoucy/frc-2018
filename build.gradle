plugins {
    id "java"
    id "com.github.spotbugs" version "1.6.8"
    id "pmd"
    id "org.jetbrains.kotlin.jvm" version "1.3.11"
    id "edu.wpi.first.GradleRIO" version "2019.1.1"
}

def ROBOT_CLASS = "frc.team166.robot.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven {
        name "WPILib Release"
        url 'http://first.wpi.edu/FRC/roborio/maven/release/'
    }
    maven { url "http://devsite.ctr-electronics.com/maven/release/"}
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
dependencies {
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    // compile ctre()
    // compile navx()
    compile group: 'com.chopshop166', name: 'chopshoplib', version: '2019.0.0-beta1'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

ext {
    SpotBugsTask = com.github.spotbugs.SpotBugsTask
}

apply from: 'checks.gradle'
apply from: 'versioning.gradle'

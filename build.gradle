import java.text.SimpleDateFormat

plugins {
    id "java"
    id "com.github.spotbugs" version "1.6.6"
    id "pmd"
    id "org.jetbrains.kotlin.jvm" version "1.3.11"
    id "edu.wpi.first.GradleRIO" version "2019.0.0-alpha-3"
}

def ROBOT_CLASS = "frc.team166.robot.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", edu.wpi.first.gradlerio.frc.RoboRIO) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = getTeamNumber()
        }
    }
    artifacts {
        artifact('frcJava', edu.wpi.first.gradlerio.frc.FRCJavaArtifact) {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = getDebugOrDefault(false)
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven {
        name "WPILib Development"
        url 'http://first.wpi.edu/FRC/roborio/maven/development/'
    }
}
// Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
// and NavX.
dependencies {
    compile wpilib()
    compile group: 'edu.wpi.first.ntcore', name: 'ntcore-java', version: '2018.4.1-20181003000242-1213-gfd82153'
    compile group: 'edu.wpi.first.wpilibj', name: 'wpilibj-java', version: '2018.4.1-20181003000242-1213-gfd82153'
    compile group: 'edu.wpi.first.cameraserver', name: 'cameraserver-java', version: '2018.4.1-20181003000242-1213-gfd82153'
    compile ctre()
    compile navx()
    compile group: 'com.chopshop166', name: 'chopshoplib', version: '2019.0.0-alpha6'
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

// Force Java 8 Compatibility mode for deployed code, in case the develoment
// system is using Java 10.
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

def runCommand = { String... args ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine args
        standardOutput = stdout
    }
    return stdout.toString().trim()

}

def getGitHash = { -> runCommand "git", "describe", "--always" }

def getGitBranch = { -> runCommand "git", "rev-parse", "--abbrev-ref", "HEAD" }

def getGitFilesChanged = { -> runCommand "git", "diff", "--name-only", "HEAD" }

task versionTxt() {
    doLast {
        String resourcesDir = "$projectDir/src/main/resources"
        def logDirBase = file(resourcesDir)
        logDirBase.mkdirs()
        file("$resourcesDir/branch.txt").text = getGitBranch()
        file("$resourcesDir/commit.txt").text = getGitHash()
        file("$resourcesDir/changes.txt").text = getGitFilesChanged()
        file("$resourcesDir/buildtime.txt").text =
                new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())
    }
}

compileJava.dependsOn versionTxt

ext {
    SpotBugsTask = com.github.spotbugs.SpotBugsTask
}

tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('config/xsl/fancy.xsl')
    }
}

spotbugs {
    ignoreFailures = true
    excludeFilter = file("$rootProject.projectDir/config/findbugs-ignore.xml")
}

pmd {
    toolVersion = "6.10.0"
    ignoreFailures = true
    ruleSets = []
    ruleSetFiles = files("$rootProject.projectDir/config/pmd-ruleset.xml")
}

wrapper {
    gradleVersion = '4.10'
}
